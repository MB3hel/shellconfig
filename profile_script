

################################################################################
# Environment variables
################################################################################

TR=`which tr`
GREP=`which grep`
SED=`which sed`

append_path(){
    case :$PATH:
        in *:"$1":*) ;;
        *) PATH="$PATH:$1" ;;
    esac
}

prepend_path(){
    case :$PATH:
        in *:"$1":*) ;;
        *) PATH="$1:$PATH" ;;
    esac
}

remove_path() {
  PATH=`printf "$PATH" | $TR ":" "\n" | $GREP -v "^$1\$" |  $TR "\n" ":" | $SED 's/:$//'`
}


if [ -d "$HOME/bin" ] ; then
    prepend_path "$HOME/bin"
fi
if [ -d "$HOME/.local/bin" ] ; then
    prepend_path "$HOME/.local/bin"
fi

unset TR
unset GREP
unset SED


################################################################################
# SSH agent management (enabled if ~/.shell_manage_ssh-agent exists)
################################################################################

# On windows, SSH_AUTH_SOCK isn't used
# Just assume ssh agent is running as a service on windows
# On other systems, launch an agent if SSH_AUTH_SOCK is not set
# If SSH_AUTH_SOCK is set before the shell starts, assume it's environment
# such as Gnome, or macOS, etc
if [ "$(uname -o)" != "Msys" ] && [ ! "$SSH_AUTH_SOCK" ]; then
    __ssh_agent_env=~/.ssh/agent.env

    __ssh_agent_load_env () { test -f "$__ssh_agent_env" && . "$__ssh_agent_env" >| /dev/null ; }

    __ssh_agent_start () {
        (umask 077; ssh-agent >| "$__ssh_agent_env")
        . "$__ssh_agent_env" >| /dev/null ; }

    __ssh_agent_load_env

    # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running
    agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

    if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
        __ssh_agent_start
    fi

    unset __ssh_agent_env
fi

################################################################################

################################################################################
# Aliases
################################################################################
# With MSYS2, need to restore some variables to original state before 
# launching windows shells. Otherwise, things will break.
if [ "$(uname -o)" = "Msys" ]; then
    __winshell () {
        PATH="$ORIGINAL_PATH" TMP="$ORIGINAL_TMP" TEMP="$ORIGINAL_TEMP" "$@"
    }
    alias cmd="__winshell cmd"
    alias cmd.exe="__winshell cmd"
    alias powershell="__winshell powershell"
    alias powershell.exe="__winshell powershell"
    alias pwsh="__winshell pwsh"
    alias pwsh.exe="__winshell pwsh"
fi
################################################################################

################################################################################
# Default settings
################################################################################
# Note: since this script is sourced first in ~/.profile
#       these can be overwritten
export EDITOR="nvim"
