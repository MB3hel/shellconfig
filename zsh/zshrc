# Directory of this script
DIR=$(dirname "${(%):-%N}")

################################################################################
# History settings
################################################################################
# Preserve history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

# Search history with up/down keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search
################################################################################

################################################################################
# Tab completion
################################################################################
# Load compinit module
autoload -Uz compinit && compinit

# Apply Oh-My-Zsh style completion
source "$DIR"/completion.zsh
################################################################################

################################################################################
# Determine if to use colors
################################################################################
__use_colors () {
    case "$TERM" in
        xterm-color) printf "yes";;
        xterm-256color) printf "yes";;
        *) printf "no";;
    esac
}
__os_name () {
    uname -o 2> /dev/null || printf "Unknown"
}
if [ "$(__use_colors)" = yes ]; then
    autoload -U colors && colors

    # Support .dircolors file in home
    if command -v dircolors &> /dev/null; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    fi
fi
################################################################################

################################################################################
# Prompt
################################################################################
# Notes on colors:
#   \e = \033 (also works in printf, etc)
#   \[ = \001 (ONLY works in PS1)
#   \] = \002 (ONLY works in PS1)
#   colors format: \e[00;31m
#   end color: \e[00m
#
#   In zsh, usually %B/%F{color_name}   and %f%b are used instead
#   however, raw escapes can be used if they are inside %{ %} to allow readline to determine
#   how long the prompt is.
#   Thus, for substitutions in prompt, printf must output %{COLOR_CODE_HERE%}. Note that % is
#   format escape in prinf though, so have to use %% for literal '%' to be output

# Enables paremeter expansion / substitution in prompt
setopt PROMPT_SUBST

__prompt_git_label () {
    local colors=$(__use_colors)
    local git_branch="$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/")"
    local git_dirty=""
    if [ ! -z "$git_branch" ]; then
        git_dirty="$([[ -z $(git status --porcelain 2> /dev/null) ]] || printf " ✗")"
        if [ $colors = yes ]; then
            printf "(%%{\e[01;36m%%}${git_branch}%%{\e[00m%%}%%{\e[01;31m%%}${git_dirty}%%{\e[00m%%})"
        else
            printf "(${git_branch}${git_dirty})"
        fi
    fi
}

__prompt_arrow () {
    local lasterr=$?
    local colors=$(__use_colors)
    local arrow="→"
    if [ $colors = yes ] && [ $lasterr -ne 0 ]; then
        arrow="%%{\e[01;31m%%}${arrow}%%{\e[00m%%}"
    elif [ $colors = yes ]; then
        arrow="%%{\e[01;32m%%}${arrow}%%{\e[00m%%}"
    fi
    printf "$arrow"
}

if [ "$(__use_colors)" = yes ]; then
    # Different color for windows system (makes it easier to distinguish from WSL)
    if [ "$(__os_name)" = "Msys" ]; then
        PS1="${debian_chroot:+($debian_chroot)}\$(__prompt_arrow)[%B%F{yellow}%n@%m%f%b:%B%F{blue}%1~%f%b]\$(__prompt_git_label)%% "
    else
        PS1="${debian_chroot:+($debian_chroot)}\$(__prompt_arrow)[%B%F{green}%n@%m%f%b:%B%F{blue}%1~%f%b]\$(__prompt_git_label)%% "
    fi
else
    PS1="${debian_chroot:+($debian_chroot)}\$(__prompt_arrow)[%n@%m:%1~]\$(__prompt_git_label)%% "
fi

if [ "$(uname -o)" = "Msys"  ]; then
    # Required for duplicate tab in windows terminal
    keep_current_path() {
        printf "\e]9;9;%s\e\\" "$(cygpath -w "$PWD")"
    }
    precmd_functions+=(keep_current_path) 
fi
################################################################################


################################################################################
# Default Aliases / Functions
################################################################################
# Color settings for commands
if [ "$(__use_colors)" = yes ]; then
    alias ls='ls --color=always'
    alias la='ls -A --color=always'
    alias ll='ls -alF --color=always'
    alias grep='grep --color=always'
    alias fgrep='fgrep --color=always'
    alias egrep='egrep --color=always'
else
    alias ls='ls --color=never'
    alias la='ls -A --color=never'
    alias ll='ls -alF --color=never'
    alias grep='grep --color=never'
    alias fgrep='fgrep --color=never'
    alias egrep='egrep --color=never'
fi

# open function like macos
case "$(__os_name)" in
    "Msys") 
        open() {
            target=$(cygpath -w "$1")
            start "" "$target"
        }
    ;;
    "Darwin")
        # Not needed b/c already exists on macos
    ;;
    *)
        open(){
            nohup xdg-open "$*" > /dev/null 2>&1
        }
    ;;
esac
################################################################################
