# Directory of this script
DIR=$(dirname "$BASH_SOURCE")

################################################################################
# Tab completion
################################################################################
# From git source tree contrib/completion directory
. "$DIR/git-completion.bash"
################################################################################

################################################################################
# Determine if to use colors
################################################################################
__use_colors () {
    case "$TERM" in
        xterm-color) printf "yes";;
        xterm-256color) printf "yes";;
        *) printf "no";;
    esac
}
__os_name () {
    uname -o 2> /dev/null || printf "Unknown"
}
if [ "$(__use_colors)" = yes ]; then
    # Support .dircolors file in home
    if command -v dircolors &> /dev/null; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    fi
fi
################################################################################

################################################################################
# Prompt
################################################################################
__prompt_git_label () {
    local colors=$(__use_colors)
    local git_branch="$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/")"
    local git_str=""
    local git_addon=""
    if [ ! -z "$git_branch" ]; then
        local git_dirty="$([[ -z $(git status --porcelain 2> /dev/null) ]] || echo " ✗")"
        if [ $colors = yes ]; then
            git_dirty="\e[01;31m${git_dirty}\e[00m"
            git_addon=" \e[01;36m(${git_branch}\e[00m${git_dirty}\e[01;36m)\e[00m"
        else
            git_addon=" git:(${git_branch}${git_dirty})"
        fi
    fi
    printf "$git_addon"
}

# Note: anything printed here gets printed BEFORE
# Additions by external programs such as python's venv prefix
__prompt_cmd_func () {
    # Can only get $? correctly for the first function that is a prompt command
    local lasterr=$?
    local colors=$(__use_colors)

    # Makes duplicate tab work in windows terminal
    if [ "$(__os_name)" = "Msys"  ]; then
        PROMPT_COMMAND=${PROMPT_COMMAND:+"$PROMPT_COMMAND; "}'printf "\e]9;9;%s\e\\" "$(cygpath -w "$PWD")"'
    fi

    # Newline before prompt
    printf "\n"

    # Arrow at start of prompt
    local arrow="➜"
    if [ $colors = yes ] && [ $lasterr -ne 0 ]; then
        arrow="\e[01;31m➜\e[0m"
    elif [ $colors = yes ]; then
        arrow="\e[01;32m➜\e[0m"
    fi
    printf "$arrow "
}

# Main prompt
# Things here should be after whatever external programs append
# to the prompt (eg python venv)
if [ "$(__use_colors)" = yes ]; then
    # Different color for windows system (makes it easier to distinguish from WSL)
    if [ "$(__os_name)" = "FAKE" ]; then
        PS1="${debian_chroot:+($debian_chroot)}\[\e[00;33m\]\u@\h\[\e[00m\]:\[\e[01;34m\]\W\[\e[00m\]\$(__prompt_git_label)"
        PS1="$PS1"$'\n$ '
    else
        PS1="${debian_chroot:+($debian_chroot)}\[\e[00;32m\]\u@\h\[\e[00m\]:\[\e[01;34m\]\W\[\e[00m\]\$(__prompt_git_label)"
        PS1="$PS1"$'\n$ '
    fi
else
    # TODO
    true
fi
PROMPT_COMMAND=__prompt_cmd_func
################################################################################


################################################################################
# Default Aliases / Functions
################################################################################
# Color settings for ls
if [ "$(__use_colors)" = yes ]; then
    alias ls='ls --color=always'
    alias la='ls -A --color=always'
    alias ll='ls -alF --color=always'
else
    alias ls='ls --color=never'
    alias la='ls -A --color=never'
    alias ll='ls -alF --color=never'
fi

# open function like macos
case "$(__os_name)" in
    "Msys") 
        open() {
            target=$(echo -n "$1" | sed 's#/#\\#g')
            start "" "$target"
        }
    ;;
    "Darwin")
        # Not needed b/c already exists on macos
    ;;
    *)
        open(){
            nohup xdg-open "$*" > /dev/null 2>&1
        }
    ;;
esac
################################################################################
